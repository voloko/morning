My 5 days of hacking m is about to finish. This is what I have done so far: http://mobileclienthack.com

I failed to re-implement the whole msite :) Instead I focused on implementing just a few pages but with enough attention to details. I implemented: feed, comments, commenting + mentions, likes, navigation, basic user profiles.

Summary
Persistent cache for models feels much faster especially without WiFi. Footprint (cold load) is manageable. Markup generation is relatively slow, might need optimization/server prerender.

Notable
The largest issue I have is connect.js. As of now it's 2x the size of the app and it's cached just for 1h => longer cold cache loading, 1 extra request for warm cache.

@Bret Taylor pointed in one of the diffs that dom construction using document.create* is mostly as fast as templates + innerHTML. It seems to be true for modern mobile browsers. I run some basic tests. And the difference is <30%. So I use offscreen dom building instead of templates.
However markup generation is slow on a mobile device regardless of the method used. It's not severe but it's noticeable. Need to investigate further. Probably we'll have to prerender feed stories on the server.

I tried to keep the footprint as small as possible (app + images + css ~20kb gzip). Thus I'm not using any of our existing frameworks (bolt, uki, javelin). For this task I wrote a small (2.6KB gzip) library that does models, bindings, view building and some utility methods. I also compress css class names, embed css/images into js package and cache heavily. Should spend some time investigating cache manifests.

localStorage is used for persistent cache. When you refresh your feed you should see old feed + 'Loading, last updated 3 hours ago'. Same for comments, profiles, likes. There's also in-memory cache for the models used, recent controllers + generated dom. There's a simple gc for localStorage. There are 2 cache profiles for users: minimal (completions) and all (profiles).

I played with css animations. However blinking makes it unusable when page scrolling is involved. Ex: transition from the middle of the feed to the post. I found no way to mitigate blinking except for using scrollable containers (iScroll/scrollability, overflow: scroll). I personally don't like them since they tend to feel unnatural. Look at m.twitter or m.g+ for example.

Source is here: https://github.com/voloko/morning and https://github.com/voloko/muv